import api from './api';

class NotificationService {
    /**
     * L·∫•y t·∫•t c·∫£ notifications c·ªßa user
     * @param {string} userId - ID c·ªßa user
     * @returns {Promise} Response t·ª´ API
     */
    async getUserNotifications(userId) {
        try {
            const response = await api.get(`/notifications/user/${userId}`);
            return response.data;
        } catch (error) {
            console.error('Error fetching user notifications:', error);
            throw error;
        }
    }

    /**
     * L·∫•y notifications ch∆∞a ƒë·ªçc c·ªßa user
     * @param {string} userId - ID c·ªßa user
     * @returns {Promise} Response t·ª´ API
     */
    async getUnreadNotifications(userId) {
        try {
            const response = await api.get(`/notifications/user/${userId}/unread`);
            return response.data;
        } catch (error) {
            console.error('Error fetching unread notifications:', error);
            throw error;
        }
    }

    /**
     * ƒê√°nh d·∫•u notification l√† ƒë√£ ƒë·ªçc
     * @param {string} notificationId - ID c·ªßa notification
     * @returns {Promise} Response t·ª´ API
     */
    async markAsRead(notificationId) {
        try {
            const response = await api.put(`/notifications/${notificationId}/read`);
            return response.data;
        } catch (error) {
            console.error('Error marking notification as read:', error);
            throw error;
        }
    }

    /**
     * T·∫°o notification m·ªõi
     * @param {Object} notificationData - D·ªØ li·ªáu notification
     * @param {string} notificationData.userId - ID user nh·∫≠n notification
     * @param {string} notificationData.title - Ti√™u ƒë·ªÅ notification
     * @param {string} notificationData.content - N·ªôi dung notification
     * @param {string} notificationData.type - Lo·∫°i notification (MESSAGE/FRIEND_REQUEST/POST)
     * @returns {Promise} Response t·ª´ API
     */
    async createNotification(notificationData) {
        try {
            const response = await api.post('/notifications', notificationData);
            return response.data;
        } catch (error) {
            console.error('Error creating notification:', error);
            throw error;
        }
    }

    /**
     * ƒê√°nh d·∫•u t·∫•t c·∫£ notifications l√† ƒë√£ ƒë·ªçc
     * @param {string} userId - ID c·ªßa user
     * @returns {Promise} Response t·ª´ API
     */
    async markAllAsRead(userId) {
        try {
            // L·∫•y t·∫•t c·∫£ notifications ch∆∞a ƒë·ªçc
            const unreadResponse = await this.getUnreadNotifications(userId);
            const unreadNotifications = unreadResponse.data || [];

            // ƒê√°nh d·∫•u t·ª´ng notification l√† ƒë√£ ƒë·ªçc
            const markPromises = unreadNotifications.map(notification =>
                this.markAsRead(notification.id)
            );

            await Promise.all(markPromises);
            return { success: true, message: 'All notifications marked as read' };
        } catch (error) {
            console.error('Error marking all notifications as read:', error);
            throw error;
        }
    }

    /**
     * L·∫•y s·ªë l∆∞·ª£ng notifications ch∆∞a ƒë·ªçc
     * @param {string} userId - ID c·ªßa user
     * @returns {Promise<number>} S·ªë l∆∞·ª£ng notifications ch∆∞a ƒë·ªçc
     */
    async getUnreadCount(userId) {
        try {
            const response = await this.getUnreadNotifications(userId);
            return response.data ? response.data.length : 0;
        } catch (error) {
            console.error('Error fetching unread count:', error);
            return 0;
        }
    }

    /**
     * X√≥a notification (n·∫øu API h·ªó tr·ª£)
     * @param {string} notificationId - ID c·ªßa notification
     * @returns {Promise} Response t·ª´ API
     */
    async deleteNotification(notificationId) {
        try {
            const response = await api.delete(`/notifications/${notificationId}`);
            return response.data;
        } catch (error) {
            console.error('Error deleting notification:', error);
            throw error;
        }
    }

    /**
     * Format th·ªùi gian notification
     * @param {string} createdAt - Th·ªùi gian t·∫°o notification
     * @returns {string} Th·ªùi gian ƒë√£ format
     */
    formatNotificationTime(createdAt) {
        const now = new Date();
        const notificationTime = new Date(createdAt);
        const diffInMs = now - notificationTime;
        const diffInMinutes = Math.floor(diffInMs / 60000);
        const diffInHours = Math.floor(diffInMinutes / 60);
        const diffInDays = Math.floor(diffInHours / 24);

        if (diffInMinutes < 1) {
            return 'V·ª´a xong';
        } else if (diffInMinutes < 60) {
            return `${diffInMinutes} ph√∫t tr∆∞·ªõc`;
        } else if (diffInHours < 24) {
            return `${diffInHours} gi·ªù tr∆∞·ªõc`;
        } else if (diffInDays < 7) {
            return `${diffInDays} ng√†y tr∆∞·ªõc`;
        } else {
            return notificationTime.toLocaleDateString('vi-VN');
        }
    }

    /**
     * L·∫•y icon cho lo·∫°i notification
     * @param {string} type - Lo·∫°i notification
     * @returns {string} Icon class ho·∫∑c emoji
     */
    getNotificationIcon(type) {
        switch (type) {
            case 'MESSAGE':
                return 'üí¨';
            case 'FRIEND_REQUEST':
                return 'üë•';
            case 'POST':
                return 'üìù';
            case 'LIKE':
                return 'üëç';
            case 'COMMENT':
                return 'üí¨';
            default:
                return 'üîî';
        }
    }

    /**
     * L·∫•y m√†u cho lo·∫°i notification
     * @param {string} type - Lo·∫°i notification
     * @returns {string} CSS class cho m√†u
     */
    getNotificationColor(type) {
        switch (type) {
            case 'MESSAGE':
                return 'text-blue-500';
            case 'FRIEND_REQUEST':
                return 'text-green-500';
            case 'POST':
                return 'text-purple-500';
            case 'LIKE':
                return 'text-red-500';
            case 'COMMENT':
                return 'text-yellow-500';
            default:
                return 'text-gray-500';
        }
    }
}

// Export singleton instance
const notificationService = new NotificationService();
export default notificationService;
